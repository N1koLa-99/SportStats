const fileInput = document.getElementById("fileInput");
const meetInfo = document.getElementById("meetInfo");
const swimmersSection = document.getElementById("eligibleSwimmers");
const swimmersList = document.getElementById("swimmersList");
const errorSection = document.getElementById("errorSection");

// –ó–∞–º–µ—Å—Ç–∏ —Å —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏ –Ω–∞ —Ç–µ–∫—É—â–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
const user = {
  id: "—Ç–µ–∫—É—â–æ-id",
  clubID: "club-id-–Ω–∞-–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è"
};

fileInput.addEventListener("change", async (event) => {
  const file = event.target.files[0];
  if (!file) return;

  resetUI();
  try {
    const zip = await JSZip.loadAsync(file);
    const xmlFileName = Object.keys(zip.files).find(f => f.endsWith(".xml") || f.endsWith(".lxf") || f.endsWith(".lef"));

    if (!xmlFileName) return showError("‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω XML —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–∞.");

    const xmlContent = await zip.files[xmlFileName].async("text");
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(xmlContent, "application/xml");

    if (xmlDoc.getElementsByTagName("parsererror").length > 0)
      return showError("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ XML.");

    const meet = xmlDoc.querySelector("MEET");
    const meetName = meet?.getAttribute("name") || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ —Å—ä—Å—Ç–µ–∑–∞–Ω–∏–µ";
    const city = meet?.getAttribute("city") || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –≥—Ä–∞–¥";
    const pool = meet.querySelector("POOL")?.getAttribute("name") || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –±–∞—Å–µ–π–Ω";
    const sessions = xmlDoc.querySelectorAll("SESSION");

    const sessionDates = Array.from(sessions).map(s => s.getAttribute("date")).filter(Boolean);
    const meetDate = sessionDates.sort()[0] || new Date().toISOString().split("T")[0];

    const ageGroups = Array.from(xmlDoc.querySelectorAll("AGEGROUP")).map(ag => ({
      minAge: parseInt(ag.getAttribute("minAge")),
      maxAge: parseInt(ag.getAttribute("maxAge")),
    }));

    showMeetInfo(meetName, city, pool, sessionDates);

    const clubUsers = await fetch(`https://sportstatsapi.azurewebsites.net/api/Users/club/${user.clubID}`, {
      headers: {
        'Content-Type': 'application/json',
        'Requester-Id': user.id
      }
    }).then(res => res.json());

    const eligible = clubUsers.filter(swimmer => {
      const age = calculateAge(swimmer.birthDate, meetDate);
      return ageGroups.some(g => age >= g.minAge && age <= g.maxAge);
    });

    if (eligible.length === 0) {
      swimmersList.innerHTML = "<li>–ù—è–º–∞ —Å—ä—Å—Ç–µ–∑–∞—Ç–µ–ª–∏, –æ—Ç–≥–æ–≤–∞—Ä—è—â–∏ –Ω–∞ –≤—ä–∑—Ä–∞—Å—Ç–æ–≤–∏—Ç–µ –≥—Ä—É–ø–∏.</li>";
    } else {
      swimmersList.innerHTML = "";
      eligible.forEach(swimmer => {
        const li = document.createElement("li");
        li.textContent = `${swimmer.firstName} ${swimmer.lastName} ‚Äì ${calculateAge(swimmer.birthDate, meetDate)} –≥.`;
        swimmersList.appendChild(li);
      });
    }

    swimmersSection.classList.remove("hidden");

  } catch (err) {
    console.error(err);
    showError("‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ñ–∞–π–ª–∞.");
  }
});

function resetUI() {
  meetInfo.innerHTML = "";
  meetInfo.classList.add("hidden");
  swimmersSection.classList.add("hidden");
  errorSection.textContent = "";
  errorSection.classList.add("hidden");
}

function showMeetInfo(name, city, pool, dates) {
  meetInfo.innerHTML = `
    <h2>${name} (${city})</h2>
    <p>üèüÔ∏è –ë–∞—Å–µ–π–Ω: <strong>${pool}</strong></p>
    <p>üóìÔ∏è –î–∞—Ç–∏ –Ω–∞ —Å–µ—Å–∏–∏—Ç–µ: ${dates.join(", ")}</p>
  `;
  meetInfo.classList.remove("hidden");
}

function showError(msg) {
  errorSection.textContent = msg;
  errorSection.classList.remove("hidden");
}

function calculateAge(birthDateStr, referenceDateStr) {
  const birthDate = new Date(birthDateStr);
  const refDate = new Date(referenceDateStr);
  let age = refDate.getFullYear() - birthDate.getFullYear();
  const m = refDate.getMonth() - birthDate.getMonth();
  if (m < 0 || (m === 0 && refDate.getDate() < birthDate.getDate())) age--;
  return age;
}
